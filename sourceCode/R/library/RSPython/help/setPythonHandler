setPythonHandler          package:RSPython          R Documentation

_G_e_t _o_r _s_e_t _t_h_e _R _t_o _P_y_t_h_o_n _f_o_r_e_i_g_n _r_e_f_e_r_e_n_c_e _h_a_n_d_l_e_r.

_D_e_s_c_r_i_p_t_i_o_n:

     The R-Python reference manager/handler is responsible for caching
     and resolving R objects that are exported to Python as references
     to R objects. The manager accepts these R objects and stores them
     with a given unique name, and returns an object that identifies
     it. When the object is used in Python, the reference is passed
     back to R and resolved by this handler.  This handler is
     implemented as a collection of basic R functions with different
     functions handling the storing and resolving of references,
     calling functions on that reference.  Usually this is a closure
     that shares access to the pool of objects being exported.  These
     two functions allow one to get the currently registered handler
     and also to set the handler.

_U_s_a_g_e:

     setPythonHandler(handler)
     getPythonHandler(handler)

_A_r_g_u_m_e_n_t_s:

 handler: the handler to be registered as the active one.

_D_e_t_a_i_l_s:

     Currently, the form of the handler is quite restricted. It should
     be a list with the same length and functions  in the same order as
     those in the default handler returned by `referenceManager'

_V_a_l_u_e:

     Both functions return the reference handler that was registered
     before the function was called. In the case of the
     `setPythonHandler', this is the value that is being replaced.

_A_u_t_h_o_r(_s):

     Duncan Temple Lang

_R_e_f_e_r_e_n_c_e_s:

     <URL: http://www.omegahat.org/RSPython>, <URL:
     http://www.python.org>

_S_e_e _A_l_s_o:

     `referenceManager'

_E_x_a_m_p_l_e_s:

